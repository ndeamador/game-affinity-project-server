name: Deployment pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize] # Run the workflow when a pull request into the master branch is opened or updated.

jobs:
  deployment_pipeline:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x] # The Node version the project uses in production.

    steps:
      - uses: actions/checkout@v2 # Action to check-out the project source from git so that the workflow can access it.
      - name: Use Node.js ${{ matrix.node-version }} # Set up Node.js to be able to utilize the commands that are specified in package.json
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci # https://docs.npmjs.com/cli/v7/commands/npm-ci
      - name: lint
        run: npm run lint
      # - name: build
      #   run: npm run build
      # - name: test
      #   run: npm test


      # # Deploy to Docker Hub
      # - name: Login to DockerHub
      #   # if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') && success()}}
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build and push to Docker Hub
      #   # if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') && success()}}
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: ndeamador/game-affinity-project-server:latest


      # Deploy to Heroku
      - name: Build, Push and Deploy to Heroku
        # if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') && success()}}
        id: heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          api_key: ${{ secrets.HEROKU_API_KEY }}
          app_name: ${{ secrets.HEROKU_APP_NAME }}
          # dockerfile_path: '.' # set the path to the folder where the Dockerfile is located
          # options: '' # Docker Build Options
          # formation: '' # Docker Dyno Formation. By default is web

  Logs:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: console messages
        run: |
          echo 'condition: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip')}}'
          echo 'title contains #skip:  ${{ contains(github.event.head_commit.message, '#skip')}}'
          echo "head_commit: ${{github.event.head_commit.message}}"
          echo "github.base_ref: ${{github.base_ref}}"
          echo "github.head_ref: ${{github.head_ref}}"
          echo "github.event_name: ${{github.event_name}}"
          echo "title contains ${{contains(github.event.head_commit.message, 'contain_test')}}"
          echo "title doesn't ${{contains(github.event.head_commit.message, 'nothing')}}"
          echo "event url: ${{github.event.url}}"
          echo "event id: ${{github.event.id}}"
      - name: gihub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: commits
        env:
          COMMITS: ${{ toJson(github.event.commits) }}
        run: echo "$COMMITS"
      - name: commit messages
        env:
          COMMIT_MESSAGES: ${{ toJson(github.event.commits.*.message) }}
        run: echo "$COMMIT_MESSAGES"